/**
 * System Health Tools
 */
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { apiClient } from "../../api/client.js";

export function registerHealthTools(server: McpServer) {
  server.tool(
    "health_check",
    "Ki·ªÉm tra tr·∫°ng th√°i API server tr√™n thi·∫øt b·ªã Android - S·ª¨ D·ª§NG ƒê·∫¶U TI√äN ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi",
    {},
    async () => {
      try {
        const health = await apiClient.health();
        return {
          content: [
            {
              type: "text",
              text:
                `‚úÖ **API Server ƒëang ho·∫°t ƒë·ªông**\n\n` +
                `üìä **Th√¥ng tin:**\n` +
                `- Tr·∫°ng th√°i: ${health.status}\n` +
                `- Uptime: ${Math.floor(health.uptime / 1000)} gi√¢y\n` +
                `- Timestamp: ${new Date(health.timestamp).toLocaleString()}`,
            },
          ],
        };
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå **L·ªói k·∫øt n·ªëi API**\n\n${
                error instanceof Error ? error.message : String(error)
              }`,
            },
          ],
        };
      }
    }
  );

  server.tool(
    "get_device_info",
    "L·∫•y th√¥ng tin thi·∫øt b·ªã Android",
    {},
    async () => {
      try {
        const deviceInfo = await apiClient.getDeviceInfo();
        return {
          content: [
            {
              type: "text",
              text:
                `üì± **Th√¥ng tin thi·∫øt b·ªã**\n\n` +
                `- Model: ${deviceInfo.deviceModel}\n` +
                `- Android: ${deviceInfo.androidVersion}\n` +
                `- M√†n h√¨nh: ${deviceInfo.screenWidth}x${deviceInfo.screenHeight}\n` +
                `- Density: ${deviceInfo.density}\n` +
                `- Orientation: ${deviceInfo.orientation}`,
            },
          ],
        };
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå **L·ªói:** ${
                error instanceof Error ? error.message : String(error)
              }`,
            },
          ],
        };
      }
    }
  );

  server.tool(
    "get_screenshot",
    "Ch·ª•p ·∫£nh m√†n h√¨nh thi·∫øt b·ªã - CH·ªà d√πng khi c·∫ßn thi·∫øt, KH√îNG d√πng ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i UI (h√£y d√πng find_elements thay th·∫ø)",
    {},
    async () => {
      try {
        const base64Image = await apiClient.getScreenshot();
        return {
          content: [
            {
              type: "text",
              text: "‚úÖ **Screenshot ƒë√£ ƒë∆∞·ª£c ch·ª•p**",
            },
            {
              type: "image",
              data: base64Image,
              mimeType: "image/png",
            },
          ],
        };
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå **L·ªói ch·ª•p ·∫£nh:** ${
                error instanceof Error ? error.message : String(error)
              }`,
            },
          ],
        };
      }
    }
  );
}
