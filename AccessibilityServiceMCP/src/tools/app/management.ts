/**
 * App Management Tools
 */
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { apiClient } from "../../api/client.js";

export function registerAppManagementTools(server: McpServer) {
  server.tool(
    "click_app",
    "Click v√†o app tr√™n home screen ho·∫∑c app drawer",
    {
      appName: z.string().optional().describe("T√™n app c·∫ßn click"),
      packageName: z.string().optional().describe("Package name c·ªßa app")
    },
    async ({ appName, packageName }) => {
      try {
        await apiClient.clickApp({ appName, packageName });
        return {
          content: [
            {
              type: "text",
              text: `‚úÖ **Click app th√†nh c√¥ng:** ${appName || packageName}`
            }
          ]
        };
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå **L·ªói click app:** ${error instanceof Error ? error.message : String(error)}`
            }
          ]
        };
      }
    }
  );

  server.tool(
    "launch_app",
    "M·ªü app b·∫±ng package name",
    {
      packageName: z.string().describe("Package name c·ªßa app c·∫ßn m·ªü")
    },
    async ({ packageName }) => {
      try {
        await apiClient.launchApp({ packageName });
        return {
          content: [
            {
              type: "text",
              text: `‚úÖ **M·ªü app th√†nh c√¥ng:** ${packageName}`
            }
          ]
        };
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå **L·ªói m·ªü app:** ${error instanceof Error ? error.message : String(error)}`
            }
          ]
        };
      }
    }
  );

  server.tool(
    "close_app",
    "ƒê√≥ng app hi·ªán t·∫°i",
    {
      packageName: z.string().optional().describe("Package name c·ªßa app c·∫ßn ƒë√≥ng")
    },
    async ({ packageName }) => {
      try {
        await apiClient.closeApp({ packageName });
        return {
          content: [
            {
              type: "text",
              text: `‚úÖ **ƒê√≥ng app th√†nh c√¥ng:** ${packageName || "app hi·ªán t·∫°i"}`
            }
          ]
        };
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå **L·ªói ƒë√≥ng app:** ${error instanceof Error ? error.message : String(error)}`
            }
          ]
        };
      }
    }
  );

  server.tool(
    "get_recent_apps",
    "L·∫•y danh s√°ch ·ª©ng d·ª•ng g·∫ßn ƒë√¢y",
    {},
    async () => {
      try {
        const recentApps = await apiClient.getRecentApps();
        let responseText = `üì± **·ª®ng d·ª•ng g·∫ßn ƒë√¢y (${recentApps.totalApps}):**\n\n`;
        
        recentApps.apps.forEach((app, index) => {
          responseText += `${index + 1}. **${app.appName}**\n`;
          responseText += `   - Package: ${app.packageName}\n`;
          responseText += `   - Position: ${app.position}\n\n`;
        });

        return {
          content: [
            {
              type: "text",
              text: responseText
            }
          ]
        };
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå **L·ªói:** ${error instanceof Error ? error.message : String(error)}`
            }
          ]
        };
      }
    }
  );
}
